<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BackgroundNoneFriendlyValue" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="BackgroundTransparentFriendlyValue" xml:space="preserve">
    <value>Transparent</value>
  </data>
  <data name="BackgroundWhiteFriendlyValue" xml:space="preserve">
    <value>White</value>
  </data>
  <data name="ChordiousAlreadyRunningErrorMessage" xml:space="preserve">
    <value>Chordious failed to start because a copy of Chordious is already running.</value>
  </data>
  <data name="ChordiousDialogCaption" xml:space="preserve">
    <value>Chordious</value>
  </data>
  <data name="ChordiousUnhandledExceptionMessageFormat" xml:space="preserve">
    <value>Chordious crashed exception: {0}</value>
  </data>
  <data name="ChordiousUpdateAvailableUpdateNowMessageFormat" xml:space="preserve">
    <value>Chordious {0} is available. Would you like to update now?</value>
  </data>
  <data name="ChordiousUpdateExceptionMessage" xml:space="preserve">
    <value>Unable to update Chordious at this time. Please try again later.</value>
  </data>
  <data name="ChordiousUpdateNoInternetExceptionMessage" xml:space="preserve">
    <value>Chordious failed to detect an active internet connection.</value>
  </data>
  <data name="ChordiousUpdateNotAvailableMessage" xml:space="preserve">
    <value>Chordious is up-to-date.</value>
  </data>
  <data name="DiagramEditorSelectedEditorRendererBackgroundLabel" xml:space="preserve">
    <value>Editor Background</value>
  </data>
  <data name="DiagramEditorSelectedEditorRendererBackgroundToolTip" xml:space="preserve">
    <value>The background to show behind the diagrams.</value>
  </data>
  <data name="DiagramExportChooseOutputPathLabel" xml:space="preserve">
    <value>...</value>
  </data>
  <data name="DiagramExportChooseOutputPathToolTip" xml:space="preserve">
    <value>Browse for the path to export to.</value>
  </data>
  <data name="DiagramExportExampleFilenameFormatLabel" xml:space="preserve">
    <value>Example</value>
  </data>
  <data name="DiagramExportExampleFilenameFormatToolTip" xml:space="preserve">
    <value>An example of what the image filename will be.</value>
  </data>
  <data name="DiagramExportOutputPathLabel" xml:space="preserve">
    <value>_Path</value>
  </data>
  <data name="DiagramExportOutputPathToolTip" xml:space="preserve">
    <value>The path where you want to export the diagram image files.</value>
  </data>
  <data name="DiagramExportOverwriteFilesLabel" xml:space="preserve">
    <value>_Overwrite Files</value>
  </data>
  <data name="DiagramExportOverwriteFilesToolTip" xml:space="preserve">
    <value>Overwrite files that already exist with the same name.</value>
  </data>
  <data name="DiagramExportScaleFactorLabel" xml:space="preserve">
    <value>_Scale</value>
  </data>
  <data name="DiagramExportScaleFactorToolTip" xml:space="preserve">
    <value>Scale the image files to what percentage of the original size.</value>
  </data>
  <data name="DiagramExportSelectedExportFormatLabel" xml:space="preserve">
    <value>Format</value>
  </data>
  <data name="DiagramExportSelectedExportFormatToolTip" xml:space="preserve">
    <value>The format of the exported image files.</value>
  </data>
  <data name="DiagramExportSelectedFilenameFormatLabel" xml:space="preserve">
    <value>_Filename</value>
  </data>
  <data name="DiagramExportSelectedFilenameFormatToolTip" xml:space="preserve">
    <value>How to format the filenames of the exported images. Codes as follows:
%c - Diagram collection name
%t - Diagram title text
%h - Diagram height (in pixels)
%w - Diagram width (in pixels)
%x - Image extension (lowercase)
%X - Image extension (uppercase)
%0 - Diagram number (starts at 0)
%1 - Diagram number (starts at 1)
%# - Total number of diagrams to be exported
%% - Percent sign</value>
  </data>
  <data name="FirstRunMessage" xml:space="preserve">
    <value>Welcome to Chordious!</value>
  </data>
  <data name="FirstRunUpdateEnabledPrompt" xml:space="preserve">
    <value>Welcome to Chordious! Would you like to check for updates when Chordious starts? (Recommended) You can change your mind later in Options.</value>
  </data>
  <data name="OptionsCheckForUpdatesAsyncLabel" xml:space="preserve">
    <value>Ch_eck For Updates</value>
  </data>
  <data name="OptionsCheckForUpdatesAsyncToolTip" xml:space="preserve">
    <value>Manually check online for updates.</value>
  </data>
  <data name="OptionsCheckUpdateOnStartLabel" xml:space="preserve">
    <value>C_heck For Updates On Start</value>
  </data>
  <data name="OptionsCheckUpdateOnStartToolTip" xml:space="preserve">
    <value>Chordious will check for updates automatically when the app starts.</value>
  </data>
  <data name="OptionsEnhancedCopyLabel" xml:space="preserve">
    <value>_Enhanced Copy And Drag</value>
  </data>
  <data name="OptionsEnhancedCopyToolTip" xml:space="preserve">
    <value>Chordious will create temporary files when copying or dragging diagrams to external programs to improve compatibility.</value>
  </data>
  <data name="OptionsLastUpdateCheckLabel" xml:space="preserve">
    <value>Last Checked</value>
  </data>
  <data name="OptionsLastUpdateCheckNeverCheckedValue" xml:space="preserve">
    <value>Never</value>
  </data>
  <data name="OptionsLastUpdateCheckToolTip" xml:space="preserve">
    <value>The last time that Chordious checked for updates.</value>
  </data>
  <data name="OptionsOpenTempFolderLabel" xml:space="preserve">
    <value>_View Temporary Files</value>
  </data>
  <data name="OptionsOpenTempFolderToolTip" xml:space="preserve">
    <value>Open the folder where Chordious stores temporary files.</value>
  </data>
  <data name="OptionsSelectedEditorRendererBackgroundLabel" xml:space="preserve">
    <value>_Diagram Editor</value>
  </data>
  <data name="OptionsSelectedEditorRendererBackgroundToolTip" xml:space="preserve">
    <value>The background to show behind the diagrams in the Diagram Editor.</value>
  </data>
  <data name="OptionsSelectedReleaseChannelLabel" xml:space="preserve">
    <value>_Release Channel</value>
  </data>
  <data name="OptionsSelectedReleaseChannelToolTip" xml:space="preserve">
    <value>The release channel that you want to get updates from.</value>
  </data>
  <data name="OptionsSelectedRendererBackgroundLabel" xml:space="preserve">
    <value>_Normal</value>
  </data>
  <data name="OptionsSelectedRendererBackgroundToolTip" xml:space="preserve">
    <value>The background to show behind the diagrams in the Chordious UI.</value>
  </data>
  <data name="OptionsSettingsBackgroundGroupLabel" xml:space="preserve">
    <value>Background</value>
  </data>
  <data name="OptionsSettingsIntegrationGroupLabel" xml:space="preserve">
    <value>Integration</value>
  </data>
  <data name="OptionsUpdatesGroupLabel" xml:space="preserve">
    <value>_Updates</value>
  </data>
  <data name="ReleaseChannelOfficialFriendlyValue" xml:space="preserve">
    <value>Official</value>
  </data>
  <data name="ReleaseChannelPreviewFriendlyValue" xml:space="preserve">
    <value>Preview</value>
  </data>
  <data name="ResetAndBackupUserConfigBackupFileMessageFormat" xml:space="preserve">
    <value>Chordious failed to load the user config.

Backup: {0}

Send this file and the details below to the developer and they may be able to fix it.</value>
  </data>
  <data name="ResetAndBackupUserConfigConfirmationMessage" xml:space="preserve">
    <value>Chordious failed to read your user config file. The file may be corrupt or damaged. Would you like to load Chordious anyway?

"No" will exit Chordious immediately.

"Yes" will make a backup of your current config then reset all of Chordious to a clean install. (You'll lose all of your diagrams, custom instruments, etc., but you may be able to recover them later from the backup.)</value>
  </data>
</root>